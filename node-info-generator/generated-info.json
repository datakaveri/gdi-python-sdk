[
  {
    "nodeName": "create-buffer",
    "inputs": {
      "config": "str (Reactflow will translate it as input)",
      "client_id": "str (Reactflow will translate it as input)",
      "artefact_url": "str (Reactflow will translate it as input)",
      "buffer_d": "float (Reactflow will translate it as input)",
      "store_artefacts": "enum [True, False] (Reactflow will translate it as input)",
      "file_path": "str (Reactflow will ignore this parameter)"
    }
  },
  {
    "nodeName": "clip-vector",
    "inputs": {
      "config": "str (Reactflow will translate it as input)",
      "client_id": "str (Reactflow will translate it as input)",
      "target_artifact_url": "str (Reactflow will translate it as input)",
      "clip_artifact_url": "str (Reactflow will translate it as input)",
      "store_artifacts": "enum [True, False] (Reactflow will translate it as input)",
      "file_path": "str (Reactflow will ignore this parameter)"
    }
  },
  {
    "nodeName": "compute-geometry",
    "inputs": {
      "config": "str (Reactflow will translate it as input)",
      "client_id": "str (Reactflow will translate it as input)",
      "artifact_url": "str (Reactflow will translate it as input)",
      "store_artifacts": "enum [True, False] (Reactflow will translate it as input)",
      "file_path": "(Reactflow will ignore this parameter)"
    }
  },
  {
    "nodeName": "features-count",
    "inputs": {
      "config": "str (Reactflow will translate it as input)",
      "client_id": "str (Reactflow will translate it as input)",
      "artefact_url": "str (Reactflow will translate it as input)",
      "store_artefacts": "enum [True, False] (Reactflow will translate it as input)"
    }
  },
  {
    "nodeName": "create-delaunay-triangles",
    "inputs": {
      "config": "str (Reactflow will translate it as input)",
      "client_id": "str (Reactflow will translate it as input)",
      "artifact_url": "str (Reactflow will translate it as input)",
      "store_artifacts": "enum [True, False] (Reactflow will translate it as input)",
      "file_path": "str (Reactflow will ignore this parameter)",
      "**kwargs": "dict (Reactflow will ignore this parameter)"
    }
  },
  {
    "nodeName": "download-artifact",
    "inputs": {
      "config": "str (Reactflow will translate it as input)",
      "client_id": "str (Reactflow will translate it as input)",
      "artefact_url": "str (Reactflow will take it from the previous step)",
      "save_as": "str (Reactflow will ignore this parameter)"
    }
  },
  {
    "nodeName": "list-data",
    "inputs": {
      "name": "str (Reactflow will translate it as input)"
    }
  },
  {
    "nodeName": "fetch-resource",
    "inputs": {
      "client_id": "str (Reactflow will translate it as input)",
      "client_secret": "str (Reactflow will translate it as input)",
      "role": "str (Reactflow will translate it as input)",
      "resource_id": "str (Reactflow will translate it as input)",
      "save_object": "enum [True, False] (Reactflow will translate it as input)",
      "config_path": "str (Reactflow will translate it as input)",
      "file_path": "str (Reactflow will translate it as input)"
    }
  },
  {
    "nodeName": "create-intersection",
    "inputs": {
      "config": "str (Reactflow will translate it as input)",
      "client_id": "str (Reactflow will translate it as input)",
      "left_feature": "str (Reactflow will take it from the previous step)",
      "right_feature": "str (Reactflow will take it from the previous step)",
      "store_artefacts": "enum [True, False] (Reactflow will translate it as input)",
      "file_path": "str (Reactflow will ignore this parameter)"
    }
  },
  {
    "nodeName": "compute_optimal_route",
    "inputs": {
      "config": "str (Reactflow will translate it as input)",
      "client_id": "str (Reactflow will translate it as input)",
      "artifact_url": "str (Reactflow will translate it as input)",
      "points_file": "str (Reactflow will translate it as input)",
      "store_artifact": "enum [True, False] (Reactflow will translate it as input)",
      "file_path": "str (Reactflow will ignore this parameter)"
    }
  },
  {
    "nodeName": "reduce-to-img",
    "inputs": {
      "config": "str (Reactflow will translate it as input)",
      "client_id": "str (Reactflow will translate it as input)",
      "artifact_url": "str (Reactflow will translate it as input)",
      "attribute": "str (Reactflow will translate it as input)",
      "grid_size": "int (Reactflow will translate it as input)",
      "reducer": "str (Reactflow will translate it as input)",
      "store_artifacts": "bool (Reactflow will translate it as input)",
      "file_path": "str (Reactflow will translate it as input)"
    }
  },
  {
    "nodeName": "create-voronoi-diagram",
    "inputs": {
      "config": "str (Reactflow will translate it as input)",
      "client_id": "str (Reactflow will translate it as input)",
      "input_artefact_url": "str (Reactflow will translate it as input)",
      "extend_artefact_url": "str (Reactflow will translate it as input)",
      "store_artefacts": "enum [True, False] (Reactflow will translate it as input)",
      "file_path": "str (Reactflow will ignore this parameter)",
      "tolerance": "float (Reactflow will translate it as input)",
      "only_edges": "enum [True, False] (Reactflow will translate it as input)"
    }
  }
]